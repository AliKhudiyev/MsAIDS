/*_________________________________________________________

onemax.ez // Evolve individuals containing 111111111111111111...
__________________________________________________________*/

\User declarations :
#define N_SIN 2
#define AMP 100.0
#define FREQ 10.0
#define PH 6.28
#define X 100
#define SIZE 1000
#define N_SAMPLE 1000

float fsamp[N_SAMPLE][2];
float fsin[3*N_SIN];
\end

\User functions:
\end

\User CUDA:
\end

\Before everything else function:
	for(int s=0; s<N_SIN; ++s){
		fsin[3*s+0] = random(0.0, AMP);
		fsin[3*s+1] = random(0.0, FREQ);
		fsin[3*s+2] = random(0.0, PH);
	}

	for(int n=0; n<N_SAMPLE; ++n){
		float fsum = 0.0, x = fsamp[n][0] = random(0.0, (double)X);
		for(int i=0; i<N_SIN; ++i){
			fsum += fsin[3*i]*sin(fsin[3*i+1]*x + fsin[3*i+2]);
		}	fsamp[n][1] = fsamp[n][1];
	}

	fsin[0] = 0.5; fsin[1] = 11.0; fsin[2] = -1.0;
	fsin[0] = 4.0; fsin[1] = 1.0; fsin[2] = 1.0;
\end

\After everything else function:
	printf("Functions looked for: u=");
	for(int s=0; s<N_SIN; ++s){
		printf("+%.2f*sin(%.2f*x+%.2f)", fsin[3*s], fsin[3*s+1], fsin[3*s+2]);
	}	printf("\n");

	for(int s=0; s<N_SIN; ++s){
		printf("+%.2f*sin(%.2f*x+%.2f)", bBest->fsin[3*s], bBest->fsin[3*s+1], bBest->fsin[3*s+2]);
	}	printf("\n");
\end

\At the beginning of each generation function:
\end

\At the end of each generation function:
\end

\At each generation before reduce function:
\end

\User classes :
	GenomeClass {
		float fsin[3*N_SIN];
		int x[SIZE];
	}
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
	for(int s=0; s<N_SIN; ++s){
		Genome.fsin[3*s] = random(0.0, AMP);
		Genome.fsin[3*s+1] = random(0.0, FREQ);
		Genome.fsin[3*s+2] = random(0.0, PH);
	}
\end

\GenomeClass::crossover :
	int nLocus=random(1, N_SIN-1);
	for(int i=nLocus; i<N_SIN; ++i){
		child.fsin[3*i] = parent2.fsin[3*i];
		child.fsin[3*i+1] = parent2.fsin[3*i+1];
		child.fsin[3*i+2] = parent2.fsin[3*i+2];
	}
\end

\GenomeClass::mutator :
	float pMutPerGene = 1.0/(3.0*N_SIN);
	for (int i=0;i<SIZE;i++){
		if (tossCoin(pMutPerGene)) Genome.fsin[3*i] = random(-AMP, AMP) / 10.0;
		if (tossCoin(pMutPerGene)) Genome.fsin[3*i+1] = random(-FREQ, FREQ) / 10.0;
		if (tossCoin(pMutPerGene)) Genome.fsin[3*i+2] = random(-PH, PH) / 10.0;
	}
\end

\GenomeClass::evaluator : // Returns the score
  float fScore=0;
  for(int i=0; i<N_SAMPLE; ++i){
	  float tmp = 0;
	  for(int s=0; s<N_SIN; ++s)
		  tmp += Genome.fsin[3*s]*sin(Genome.fsin[3*s+1]*fsamp[i][0]+Genome.fsin[3*s+2]);
	  fScore += fabs(fsamp[i][1] - tmp);
  }
  return fScore;
\end

\User Makefile options:
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100   	// NB_GEN
  Time limit: 0 			// In seconds, 0 to deactivate
  Population size : 100			//POP_SIZE
  Offspring size : 100 // 40%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : maximise      // Maximise
  Selection operator: Tournament 2
  Surviving parents: 100% //percentage or absolute
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong			//Weak or Strong
  Elite: 1
  Print stats: true				//Default: 1
  Generate csv stats file:false
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				//Default: 0

  Remote island model: false
  IP file: ip.txt 			//File containing all the remote island's IP
  Server port : 2929
  Migration probability: 0.3

  Save population: false
  Start from file:false
\end
